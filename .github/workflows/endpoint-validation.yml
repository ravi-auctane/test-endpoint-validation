name: Endpoint Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

jobs:
  validate-endpoints:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install Python dependencies
      run: |
        echo "Installing required Python packages..."
        pip install PyYAML
        # Install any other dependencies your script needs
        # If you have a requirements.txt file:
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        # Show installed packages for debugging
        echo "Installed packages:"
        pip list
    
    - name: Run endpoint validation
      id: validate
      shell: bash
      run: |
        # Initialize exit_code to avoid empty variable errors
        exit_code=""
        
        # Function to run validation
        run_validation() {
          if [ ! -f "endpoint_validator.py" ]; then
            echo "❌ Error: endpoint_validator.py not found!"
            return 2
          fi
          
          python endpoint_validator.py --changed-only --output-json > validation_results.json 2> validation_errors.txt
          return $?
        }
        
        # Run the validation and capture exit code
        run_validation && exit_code=0 || exit_code=$?
        
        # Store results (ensure exit_code is never empty)
        echo "validation_exit_code=${exit_code:-999}" >> $GITHUB_OUTPUT
        
        # Display errors if any
        if [ -f validation_errors.txt ] && [ -s validation_errors.txt ]; then
          echo "::group::Python Errors/Warnings"
          cat validation_errors.txt
          echo "::endgroup::"
        fi
        
        # Display results
        if [ -f validation_results.json ] && [ -s validation_results.json ]; then
          echo "::group::Validation Results (JSON)"
          cat validation_results.json | python -m json.tool 2>/dev/null || cat validation_results.json
          echo "::endgroup::"
        fi
        
        # Human-readable summary (use string comparison to handle empty values)
        echo "---"
        if [ "${exit_code}" = "0" ]; then
          echo "✅ Validation passed: All endpoints follow allowed patterns"
        elif [ "${exit_code}" = "1" ]; then
          echo "❌ Validation failed: Invalid endpoints detected"
        elif [ -z "${exit_code}" ]; then
          echo "⚠️ Validation error: Unable to determine exit code"
        else
          echo "⚠️ Validation error: Script failed with exit code ${exit_code}"
        fi
        
        # Always exit 0 here to let the next step handle the failure
        exit 0
    
    - name: Comment on PR
      if: github.event_name == 'pull_request' && steps.validate.outputs.validation_exit_code != '0'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const exitCode = '${{ steps.validate.outputs.validation_exit_code }}';
          
          let comment = '## ❌ Endpoint Validation Failed\n\n';
          
          if (exitCode === '999' || exitCode === '') {
            comment += '⚠️ The validation script encountered an error. Please check the action logs.\n';
          } else {
            try {
              if (fs.existsSync('validation_results.json')) {
                const results = JSON.parse(fs.readFileSync('validation_results.json', 'utf8'));
                if (results.violations && results.violations.length > 0) {
                  comment += `Found ${results.violations.length} invalid endpoint(s):\n\n`;
                  comment += '| File | Endpoint |\n|------|----------|\n';
                  results.violations.forEach(v => {
                    comment += `| \`${v.file}\` | \`${v.endpoint}\` |\n`;
                  });
                }
              }
            } catch (e) {
              comment += 'Error processing validation results.\n';
            }
          }
          
          comment += `\n[View Details](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: comment
          });
    
    - name: Fail the build if validation failed
      if: steps.validate.outputs.validation_exit_code != '0'
      run: |
        code="${{ steps.validate.outputs.validation_exit_code }}"
        if [ "$code" = "1" ]; then
          echo "::error::Build failed due to invalid endpoints"
        else
          echo "::error::Build failed due to validation script error (exit code: $code)"
        fi
        exit 1